import { writable } from "svelte/store";
import { getRuntimeFromContext as getRuntimeFromContextShared, addRuntimeToContext as addRuntimeToContextShared, } from "../shared/context.js";
export const getRuntimeFromContext = () => getRuntimeFromContextShared();
export const addRuntimeToContext = (runtime) => {
    const _language = writable(runtime.language);
    const _i = writable(runtime.i);
    const switchLanguage = async (language) => {
        if (runtime.language === language)
            return;
        await runtime.loadResource(language);
        runtime.switchLanguage(language);
        _i.set(runtime.i);
        _language.set(language);
    };
    addRuntimeToContextShared({
        language: readonly(_language),
        referenceLanguage: runtime.referenceLanguage,
        languages: runtime.languages,
        i: readonly(_i),
        loadResource: runtime.loadResource,
        switchLanguage,
        route,
    });
};
// TODO: output warning during dev that calling this does not make sense
const route = (href) => {
    if (import.meta.env.DEV) {
        console.info(`Calling the function 'route' is unnecessary with this project configuration, because it only returns the input.`);
    }
    return href;
};
// ------------------------------------------------------------------------------------------------
// copy from "svelte/store" to support older versions than `3.56.0`
function readonly(store) {
    return {
        // @ts-ignore
        subscribe: store.subscribe.bind(store),
    };
}
