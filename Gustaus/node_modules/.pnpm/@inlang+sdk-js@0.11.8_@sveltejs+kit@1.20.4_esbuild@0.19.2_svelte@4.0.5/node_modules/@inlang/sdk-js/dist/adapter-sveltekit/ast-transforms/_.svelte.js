import { dedent } from "ts-dedent";
import { findImportDeclarations, addImport, removeImport, isSdkImportPresent, getImportSpecifiersAsStrings, } from "../../ast-transforms/utils/imports.js";
import { codeToSourceFile, nodeToCode } from "../../ast-transforms/utils/js.util.js";
import { isOptOutImportPresent } from "./utils/imports.js";
import { getSvelteFileParts } from "./utils/svelte.util.js";
export const transformSvelte = (filePath, config, code) => {
    const fileParts = getSvelteFileParts(code);
    if (isOptOutImportPresent(fileParts))
        return code;
    transform(filePath, config, fileParts);
    return fileParts.toString();
};
// TODO: what if both script tags import different variables?
const transform = (filePath, config, fileParts) => {
    fileParts.script = transformScriptTag(filePath, config, fileParts.script);
    fileParts.moduleScript = transformScriptTag(filePath, config, fileParts.moduleScript);
};
const transformScriptTag = (filePath, config, script) => {
    const sourceFile = codeToSourceFile(script, filePath);
    transformSdkImports(config, sourceFile);
    return nodeToCode(sourceFile);
};
const transformSdkImports = (config, sourceFile) => {
    if (!isSdkImportPresent(sourceFile))
        return;
    addImport(sourceFile, `@inlang/sdk-js/adapter-sveltekit/client/${config.languageInUrl ? "not-reactive" : "reactive-workaround"}`, "getRuntimeFromContext");
    const imports = getImportSpecifiersAsStrings(sourceFile, "@inlang/sdk-js");
    const importDeclarations = findImportDeclarations(sourceFile, "@inlang/sdk-js");
    importDeclarations[0].replaceWithText(dedent `
		const { ${imports} } = getRuntimeFromContext()
	`);
    removeImport(sourceFile, "@inlang/sdk-js");
};
