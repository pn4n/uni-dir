import { Project, Node, QuoteKind, IndentationText, ScriptKind } from "ts-morph";
import { dedent } from "ts-dedent";
import { InlangException } from "../../exceptions.js";
// ------------------------------------------------------------------------------------------------
const parseCode = (code, filePath) => new Project({
    manipulationSettings: {
        quoteKind: QuoteKind.Single,
        indentationText: IndentationText.Tab,
        useTrailingCommas: true,
    },
}).createSourceFile(filePath || "_dummy_.ts", code, { overwrite: true });
const printCode = (node) => (node && node.print({ scriptKind: ScriptKind.TS }).trim()) || "";
// ------------------------------------------------------------------------------------------------
export const codeToSourceFile = (code, filePath) => parseCode(dedent(code), filePath);
export const codeToNode = (code) => {
    const node = codeToSourceFile(code, "")
        .getStatement(Node.isVariableStatement)
        ?.getDeclarationList()
        .getDeclarations()[0];
    if (!node) {
        throw new InlangException("Could not find variable declaration.");
    }
    if (node.getName() !== "x") {
        throw new InlangException("The variable must be named 'x'.");
    }
    const initializer = node.getInitializer();
    if (!initializer) {
        throw new InlangException("Could not find variable initializer.");
    }
    return initializer;
};
export const nodeToCode = (node) => printCode(node);
