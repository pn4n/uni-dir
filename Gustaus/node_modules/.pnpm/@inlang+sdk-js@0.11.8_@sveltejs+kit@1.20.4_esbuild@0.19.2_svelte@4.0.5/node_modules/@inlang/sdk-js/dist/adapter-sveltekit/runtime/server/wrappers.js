import { detectLanguage } from "../../../detectors/detectLanguage.js";
import { initSvelteKitServerRuntime } from "./runtime.js";
import { addRuntimeToLocals, getRuntimeFromLocals, initState } from "./state.js";
import { sequence } from "@sveltejs/kit/hooks";
export const initHandleWrapper = (options) => ({
    use: (handle) => {
        let runtime;
        const excludedRoutes = [
            "/inlang",
            "/[fallback]",
            ...(options.excludedRoutes || []), // user defined excluded routes
        ];
        return sequence(async ({ event, resolve }) => {
            const pathname = event.url.pathname;
            runtime = getRuntimeFromLocals(event.locals);
            if (runtime) {
                // runtime was already added by a previous wrapper
                return resolve(event);
            }
            if (excludedRoutes.some((route) => pathname.startsWith(route))) {
                return resolve(event);
            }
            const { referenceLanguage, languages } = await initState(await options.inlangConfigModule);
            let language = options.getLanguage(event);
            // TODO: create `isLanguage` helper function
            if (!language || !languages.includes(language)) {
                if (options.redirect) {
                    const detectedLanguage = await detectLanguage({ referenceLanguage, languages }, ...(options.initDetectors ? options.initDetectors(event) : []));
                    throw options.redirect.throwable(307, options.redirect.getPath(event, detectedLanguage).toString());
                }
                language = undefined;
            }
            runtime = initSvelteKitServerRuntime({
                referenceLanguage,
                languages,
                language,
            });
            addRuntimeToLocals(event.locals, runtime);
            return resolve(event, {
                transformPageChunk: language
                    ? async ({ html }) => html.replace("<html", `<html lang="${language}"`)
                    : undefined,
            });
        }, (input) => handle(input, runtime));
    },
});
export const initRootLayoutServerLoadWrapper = () => ({
    use: (load) => async (event) => {
        const runtime = getRuntimeFromLocals(event.locals);
        // TODO: only insert if language detection strategy url is used
        event.params.lang;
        return {
            ...(await load(event, runtime)),
            ...(runtime
                ? {
                    "[inlang]": {
                        referenceLanguage: runtime.referenceLanguage,
                        languages: runtime.languages,
                        language: runtime.language, // TODO: only pass this if `language` gets detected on server
                    },
                }
                : undefined),
        };
    },
});
// ------------------------------------------------------------------------------------------------
const initGenericServerWrapper = () => ({
    use: (fn) => async (event) => {
        const runtime = getRuntimeFromLocals(event.locals);
        return fn(event, runtime);
    },
});
export const initServerLoadWrapper = () => initGenericServerWrapper();
export const initActionWrapper = () => initGenericServerWrapper();
export const initRequestHandlerWrapper = () => initGenericServerWrapper();
