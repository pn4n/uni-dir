import type { ViteDevServer } from "vite";
import { InlangSdkException } from "./exceptions.js";
export declare const plugin: () => {
    name: string;
    enforce: "pre";
    configureServer(this: void, server: ViteDevServer): void;
    config(this: void): {
        ssr: {
            noExternal: string[];
        };
    };
    resolveId(this: import("rollup").PluginContext, id: string): string | undefined;
    load(this: import("rollup").PluginContext, id: string): Promise<string | undefined>;
    buildStart(this: import("rollup").PluginContext): Promise<void>;
    transform(this: import("rollup").TransformPluginContext, code: string, id: string): Promise<string | null>;
};
export declare class InlangTransformException extends InlangSdkException {
    readonly cause: Error;
    constructor(path: string, cause: Error);
}
//# sourceMappingURL=plugin.d.ts.map