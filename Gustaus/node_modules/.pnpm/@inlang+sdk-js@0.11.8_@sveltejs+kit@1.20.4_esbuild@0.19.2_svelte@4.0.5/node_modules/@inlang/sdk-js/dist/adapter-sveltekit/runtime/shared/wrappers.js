import { detectLanguage } from "../../../detectors/index.js";
import { initSvelteKitClientRuntime } from "../client/runtime.js";
import { addRuntimePromiseToEvent, addRuntimeToData, getRuntimePromiseFromEvent, wait, } from "./utils.js";
// ------------------------------------------------------------------------------------------------
const cache = {};
const initRuntimeForWrappers = async (event, options) => {
    const existingPromise = getRuntimePromiseFromEvent(event);
    if (existingPromise)
        return existingPromise;
    if (!options) {
        await wait(0);
        return initRuntimeForWrappers(event, options);
    }
    let resolveRuntimePromise = undefined;
    addRuntimePromiseToEvent(event, new Promise((resolve) => (resolveRuntimePromise = resolve)));
    const runtime = await initRuntime(event, options, event.data["[inlang]"]);
    resolveRuntimePromise(runtime);
    return runtime;
};
const initRuntime = async (event, options, data) => {
    if (!data) {
        // TODO: warn only during development
        const useWarn = (defaultValue) => () => console.warn("inlang was not correctly set up on this page. Please check `routing.exclude` in your `inlang.config.js` file.") || defaultValue;
        return {
            i: useWarn(""),
            loadResource: useWarn(),
            switchLanguage: useWarn(),
            languages: [],
        };
    }
    const { referenceLanguage, languages, language: lang } = data;
    // TODO: only add this conditional logic if shared detection strategies get used
    const language = lang || !options.initDetectors
        ? lang
        : await detectLanguage({ referenceLanguage, languages }, ...options.initDetectors(event));
    return initSvelteKitClientRuntime({
        fetch: event.fetch,
        language,
        referenceLanguage,
        languages,
        cache,
    });
};
// ------------------------------------------------------------------------------------------------
export const initRootLayoutLoadWrapper = (options) => ({
    use: (load) => async (event) => {
        const runtime = await initRuntimeForWrappers(event, options);
        const payload = await load(event, runtime);
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const { "[inlang]": _, ...data } = payload || event.data;
        return addRuntimeToData(data, runtime);
    },
});
// ------------------------------------------------------------------------------------------------
export const initRootPageLoadWrapper = (options) => ({
    use: (load) => async (event) => {
        const data = await event.parent();
        const language = data.language;
        if (!language && options.browser) {
            const { referenceLanguage, languages } = data;
            if ((!language || !languages.includes(language)) && options.redirect) {
                const detectedLanguage = await detectLanguage({ referenceLanguage, languages }, ...(options.initDetectors ? options.initDetectors(event) : []));
                throw options.redirect.throwable(307, options.redirect.getPath(event, detectedLanguage).toString());
            }
        }
        const runtime = await initRuntimeForWrappers(event);
        return load(event, runtime);
    },
});
// ------------------------------------------------------------------------------------------------
export const initLoadWrapper = () => ({
    use: (load) => async (event) => {
        const runtime = await initRuntimeForWrappers(event);
        return load(event, runtime);
    },
});
