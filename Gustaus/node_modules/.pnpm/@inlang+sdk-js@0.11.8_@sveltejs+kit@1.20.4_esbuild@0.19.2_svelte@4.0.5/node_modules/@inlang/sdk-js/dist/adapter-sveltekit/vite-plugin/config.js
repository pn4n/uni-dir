import { mkdir, readFile, writeFile, stat } from "node:fs/promises";
import { initConfig } from "../../config/index.js";
import { dedent } from "ts-dedent";
import { testConfigFile } from "@inlang/core/test";
import { initInlangEnvironment } from "../../config/config.js";
import { validateSdkConfig } from "@inlang/sdk-js-plugin";
// @ts-ignore
import { version } from "../../../package.json";
import path from "node:path";
import { pathToFileURL } from "node:url";
import * as svelteKit from "@sveltejs/kit";
import { findDepPkgJsonPath } from "vitefu";
import { InlangSdkException } from "./exceptions.js";
import { codeToSourceFile } from "../../ast-transforms/utils/js.util.js";
import { Node } from "ts-morph";
import { findExport } from "../../ast-transforms/utils/exports.js";
export const doesPathExist = async (path) => !!(await stat(path).catch(() => false));
const cwdFolderPath = process.cwd();
const inlangConfigFilePath = path.resolve(cwdFolderPath, "inlang.config.js");
let configPromise = undefined;
export const getTransformConfig = async () => {
    if (configPromise)
        return configPromise;
    // eslint-disable-next-line no-async-promise-executor
    return (configPromise = new Promise(async (resolve) => {
        await createInlangConfigIfNotPresentYet();
        await updateSdkPluginVersion();
        // TODO: combine `testConfigFile` and `initConfig` functionality
        const inlangConfigAsString = await readFile(inlangConfigFilePath, { encoding: "utf-8" });
        const [, exception] = await testConfigFile({
            file: inlangConfigAsString,
            env: await initInlangEnvironment(),
        });
        if (exception) {
            throw exception;
        }
        const inlangConfigModule = await import(pathToFileURL(inlangConfigFilePath).toString());
        const inlangConfig = await initConfig(inlangConfigModule);
        const { default: svelteConfig } = (await import(pathToFileURL(path.resolve(cwdFolderPath, "svelte.config.js")).toString()));
        const files = {
            appTemplate: path.resolve(cwdFolderPath, svelteConfig.kit?.files?.appTemplate || path.resolve("src", "app.html")),
            routes: path.resolve(cwdFolderPath, svelteConfig.kit?.files?.routes || path.resolve("src", "routes")),
            serverHooks: path.resolve(cwdFolderPath, svelteConfig.kit?.files?.hooks?.server || path.resolve("src", "hooks.server")),
        };
        assertConfigWithSdk(inlangConfig);
        inlangConfig.sdk = validateSdkConfig(inlangConfig.sdk);
        const languageInUrl = inlangConfig?.sdk?.languageNegotiation?.strategies?.some(({ type }) => type === "url") ||
            false;
        const rootRoutesFolder = path.resolve(files.routes, languageInUrl ? "[lang]" : "");
        const isStatic = (await shouldContentBePrerendered(files.routes)) ||
            (await shouldContentBePrerendered(rootRoutesFolder));
        const usesTypeScript = await doesPathExist(path.resolve(cwdFolderPath, "tsconfig.json"));
        const svelteKitVersion = svelteKit.VERSION ||
            (await getInstalledVersionOfPackage("@sveltejs/kit"));
        resolve({
            cwdFolderPath,
            debug: !!inlangConfig.sdk?.debug,
            languageInUrl,
            isStatic,
            rootRoutesFolder,
            inlang: inlangConfig,
            svelteKit: {
                version: svelteKitVersion,
                usesTypeScript,
                files,
            },
        });
    }));
};
export const resetConfig = () => (configPromise = undefined);
// ------------------------------------------------------------------------------------------------
class InlangSdkConfigException extends InlangSdkException {
}
function assertConfigWithSdk(config) {
    if (!config) {
        throw new InlangSdkConfigException(dedent `
			Could not locate 'inlang.config.js' at the root of your project (${inlangConfigFilePath}).
			Make sure the file exists. You can generate the file using the inlang CLI.
			See https://inlang.com/documentation/apps/inlang-cli
		`);
    }
    if (!("sdk" in config)) {
        throw new InlangSdkConfigException(dedent `
			Invalid config. Make sure to add the 'sdkPlugin' to your 'inlang.config.js' file.
			See https://inlang.com/documentation/sdk/configuration
		`);
    }
}
// ------------------------------------------------------------------------------------------------
const createInlangConfigIfNotPresentYet = async () => {
    const inlangConfigExists = await doesPathExist(inlangConfigFilePath);
    if (inlangConfigExists)
        return;
    await createDemoResources();
    return writeFile(inlangConfigFilePath, `
/**
 * @type { import("@inlang/core/config").DefineConfig }
 */
export async function defineConfig(env) {
	const { default: jsonPlugin } = await env.$import(
		"https://cdn.jsdelivr.net/npm/@inlang/plugin-json@3/dist/index.js"
	)
	const { default: sdkPlugin } = await env.$import(
		"https://cdn.jsdelivr.net/npm/@inlang/sdk-js-plugin/dist/index.js"
	)

	return {
		referenceLanguage: "en",
		plugins: [
			jsonPlugin({
				pathPattern: "./languages/{language}.json",
			}),
			sdkPlugin({
				languageNegotiation: {
					strategies: [{ type: "localStorage" }]
				}
			}),
		],
	}
}
`);
};
// TODO: do this in a better way https://github.com/inlang/inlang/issues/708
const createDemoResources = async () => {
    const resourcesFolder = path.resolve(cwdFolderPath, "languages");
    if (!(await doesPathExist(resourcesFolder))) {
        await mkdir(path.resolve(resourcesFolder));
    }
    await writeFile(path.resolve(resourcesFolder, "en.json"), dedent `
		{
		  "welcome": "Welcome to inlang"
		}
	`, { encoding: "utf-8" });
    await writeFile(path.resolve(resourcesFolder, "de.json"), dedent `
		{
		  "welcome": "Willkommen bei inlang"
		}
	`, { encoding: "utf-8" });
};
// ------------------------------------------------------------------------------------------------
const shouldContentBePrerendered = async (routesFolder) => {
    const filesToLookFor = ["+layout.server.js", "+layout.server.ts", "+layout.js", "+layout.ts"];
    const prerenderExportVCalues = await Promise.all(filesToLookFor.map(async (file) => {
        const filePath = path.resolve(routesFolder, file);
        const contents = await readFile(filePath, { encoding: "utf-8" }).catch(() => undefined);
        if (!contents || !contents.trim())
            return undefined;
        const sourceFile = codeToSourceFile(contents);
        const prerenderExport = findExport(sourceFile, "prerender");
        if (!prerenderExport) {
            return undefined;
        }
        if (!Node.isVariableDeclaration(prerenderExport)) {
            return undefined;
        }
        return prerenderExport.getInitializer();
    }));
    return prerenderExportVCalues
        .map((node) => Node.isTrueLiteral(node) ||
        (Node.isStringLiteral(node) && node.getLiteralText() === "auto"))
        .some(Boolean);
};
// ------------------------------------------------------------------------------------------------
const updateSdkPluginVersion = async () => {
    const inlangConfigAsString = await readFile(inlangConfigFilePath, { encoding: "utf-8" });
    // this regex detects the new `https://cdn.jsdelivr.net/npm/@inlang/sdk-js-plugin/dist/index.js` as well as
    // the older https://cdn.jsdelivr.net/npm/@inlang/sdk-js/dist/plugin/index.js url
    // both urls are also detected with the optional @version identifier
    const REGEX_PLUGIN_VERSION = /https:\/\/cdn\.jsdelivr\.net\/npm\/@inlang\/sdk-js(-plugin)?@?(.*)?\/dist(\/plugin)?\/index\.js/g;
    const newConfig = inlangConfigAsString.replace(REGEX_PLUGIN_VERSION, `https://cdn.jsdelivr.net/npm/@inlang/sdk-js-plugin@${version}/dist/index.js`);
    if (inlangConfigAsString !== newConfig) {
        console.info(`Updating 'inlang.config.js' to use the correct version of '@inlang/sdk-js-plugin' (${version})`);
        await writeFile(inlangConfigFilePath, newConfig);
    }
};
// ------------------------------------------------------------------------------------------------
const getInstalledVersionOfPackage = async (pkg) => {
    const pkgJsonPath = await findDepPkgJsonPath(pkg, cwdFolderPath);
    if (!pkgJsonPath)
        return undefined;
    const pkgJson = JSON.parse(await readFile(pkgJsonPath, { encoding: "utf-8" }));
    return pkgJson.version;
};
